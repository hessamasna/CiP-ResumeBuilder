// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: auth_service.proto

package grpc_models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GprcAuthServiceClient is the client API for GprcAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GprcAuthServiceClient interface {
	JwtIsValid(ctx context.Context, in *JwtIsValidRequest, opts ...grpc.CallOption) (*JwtIsValidResponse, error)
}

type gprcAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGprcAuthServiceClient(cc grpc.ClientConnInterface) GprcAuthServiceClient {
	return &gprcAuthServiceClient{cc}
}

func (c *gprcAuthServiceClient) JwtIsValid(ctx context.Context, in *JwtIsValidRequest, opts ...grpc.CallOption) (*JwtIsValidResponse, error) {
	out := new(JwtIsValidResponse)
	err := c.cc.Invoke(ctx, "/GprcAuthService/JwtIsValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GprcAuthServiceServer is the server API for GprcAuthService service.
// All implementations must embed UnimplementedGprcAuthServiceServer
// for forward compatibility
type GprcAuthServiceServer interface {
	JwtIsValid(context.Context, *JwtIsValidRequest) (*JwtIsValidResponse, error)
	mustEmbedUnimplementedGprcAuthServiceServer()
}

// UnimplementedGprcAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGprcAuthServiceServer struct {
}

func (UnimplementedGprcAuthServiceServer) JwtIsValid(context.Context, *JwtIsValidRequest) (*JwtIsValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JwtIsValid not implemented")
}
func (UnimplementedGprcAuthServiceServer) mustEmbedUnimplementedGprcAuthServiceServer() {}

// UnsafeGprcAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GprcAuthServiceServer will
// result in compilation errors.
type UnsafeGprcAuthServiceServer interface {
	mustEmbedUnimplementedGprcAuthServiceServer()
}

func RegisterGprcAuthServiceServer(s grpc.ServiceRegistrar, srv GprcAuthServiceServer) {
	s.RegisterService(&GprcAuthService_ServiceDesc, srv)
}

func _GprcAuthService_JwtIsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JwtIsValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GprcAuthServiceServer).JwtIsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GprcAuthService/JwtIsValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GprcAuthServiceServer).JwtIsValid(ctx, req.(*JwtIsValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GprcAuthService_ServiceDesc is the grpc.ServiceDesc for GprcAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GprcAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GprcAuthService",
	HandlerType: (*GprcAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JwtIsValid",
			Handler:    _GprcAuthService_JwtIsValid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_service.proto",
}
